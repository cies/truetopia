--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: pager
comment: 
- !ruby/struct:SM::Flow::P 
  body: "Just like <tt>new</tt>, but yields the object after instantiation and returns it afterwards. This is very useful for manual pagination:"
- !ruby/struct:SM::Flow::VERB 
  body: "  @entries = WillPaginate::Collection.create(1, 10) do |pager|\n    result = Post.find(:all, :limit =&gt; pager.per_page, :offset =&gt; pager.offset)\n    # inject the result array into the paginated collection:\n    pager.replace(result)\n\n    unless pager.total_entries\n      # the pager didn't manage to guess the total count, do it manually\n      pager.total_entries = Post.count\n    end\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: "The possibilities with this are endless. For another example, here is how WillPaginate used to define pagination for Array instances:"
- !ruby/struct:SM::Flow::VERB 
  body: "  Array.class_eval do\n    def paginate(page = 1, per_page = 15)\n      WillPaginate::Collection.create(page, per_page, size) do |pager|\n        pager.replace self[pager.offset, pager.per_page].to_a\n      end\n    end\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: The Array#paginate API has since then changed, but this still serves as a fine example of WillPaginate::Collection usage.
full_name: WillPaginate::Collection::create
is_singleton: true
name: create
params: (page, per_page, total = nil, &block) {|pager| ...}
visibility: public
