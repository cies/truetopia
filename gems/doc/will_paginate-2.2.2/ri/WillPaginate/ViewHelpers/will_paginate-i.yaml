--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Renders Digg/Flickr-style pagination for a WillPaginate::Collection object. Nil is returned if there is only one page in total; no point in rendering the pagination in that case...
- !ruby/struct:SM::Flow::H 
  level: 4
  text: Options
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:class</tt> -- CSS class name for the generated DIV (default: &quot;pagination&quot;)"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:prev_label</tt> -- default: &quot;\xC2\xAB Previous&quot;"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:next_label</tt> -- default: &quot;Next \xC2\xBB&quot;"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:inner_window</tt> -- how many links are shown around the current page (default: 4)"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:outer_window</tt> -- how many links are around the first and the last page (default: 1)"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:separator</tt> -- string separator for page HTML elements (default: single space)"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:param_name</tt> -- parameter name for page number in URLs (default: <tt>:page</tt>)"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:params</tt> -- additional parameters when generating pagination links (eg. <tt>:controller =&gt; &quot;foo&quot;, :action =&gt; nil</tt>)
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:renderer</tt> -- class name of the link renderer (default: WillPaginate::LinkRenderer)"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:page_links</tt> -- when false, only previous/next links are rendered (default: true)"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:container</tt> -- toggles rendering of the DIV container for pagination links, set to false only when you are rendering your own pagination markup (default: true)"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "<tt>:id</tt> -- HTML ID for the container (default: nil). Pass <tt>true</tt> to have the ID automatically generated from the class name of objects in collection: for example, paginating ArticleComment models would yield an ID of &quot;article_comments_pagination&quot;."
  type: :BULLET
- !ruby/struct:SM::Flow::P 
  body: "All options beside listed ones are passed as HTML attributes to the container element for pagination links (the DIV). For example:"
- !ruby/struct:SM::Flow::VERB 
  body: "  &lt;%= will_paginate @posts, :id =&gt; 'wp_posts' %&gt;\n"
- !ruby/struct:SM::Flow::P 
  body: "... will result in:"
- !ruby/struct:SM::Flow::VERB 
  body: "  &lt;div class=&quot;pagination&quot; id=&quot;wp_posts&quot;&gt; ... &lt;/div&gt;\n"
- !ruby/struct:SM::Flow::H 
  level: 4
  text: Using the helper without arguments
- !ruby/struct:SM::Flow::P 
  body: "If the helper is called without passing in the collection object, it will try to read from the instance variable inferred by the controller name. For example, calling <tt>will_paginate</tt> while the current controller is PostsController will result in trying to read from the <tt>@posts</tt> variable. Example:"
- !ruby/struct:SM::Flow::VERB 
  body: "  &lt;%= will_paginate :id =&gt; true %&gt;\n"
- !ruby/struct:SM::Flow::P 
  body: "... will result in <tt>@post</tt> collection getting paginated:"
- !ruby/struct:SM::Flow::VERB 
  body: "  &lt;div class=&quot;pagination&quot; id=&quot;posts_pagination&quot;&gt; ... &lt;/div&gt;\n"
full_name: WillPaginate::ViewHelpers#will_paginate
is_singleton: false
name: will_paginate
params: (collection = nil, options = {})
visibility: public
